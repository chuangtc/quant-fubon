/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface FutOptOrder {
  /** 交易類別 */
  oxtp: Oxtp
  /** 盤別 */
  marketType: FutOptMarketType
  /** 日期 */
  date: string
  /** 買賣別 */
  buySell: BSAction
  /** 商品代碼 */
  symbol: string
  market: string
  /** 價格別 */
  priceType: FutOptPriceType
  /** 價格 */
  price?: string
  /** 股/口數 */
  lot?: number
  /** ROD/FOK/IOC */
  timeInForce: TimeInForce
  /** 交易別 */
  orderType: FutOptOrderType
  /** second callput */
  symbol2?: string
  /** second buy_sell */
  buySell2?: BSAction
  /** 用戶端編號 */
  userDef?: string
}
export interface FutOptModifyPrice {
  /** 委託單號 */
  txse: string
  /** 委託書號 */
  orderNo: string
  /** 日期 */
  date: string
  /** 資產類別 */
  asty: string
  marketType: FutOptMarketType
  priceType: FutOptPriceType
  /** 商品代碼 */
  stockNo: string
  /** 異動後有效價格 */
  newPrice?: string
  /** 價格別異動 */
  newPriceType?: FutOptPriceType
}
export interface FutOptModifyLot {
  /** 委託單號 */
  txse: string
  /** 委託書號 */
  orderNo: string
  /** 日期 */
  date: string
  /** 資產類別 */
  asty: string
  marketType: FutOptMarketType
  /** 商品代碼 */
  symbol: string
  /** 異動後有效總量 */
  newQuantity: number
}
export interface Equity {
  date: string
  branchNo: string
  account: string
  currency: string
  yesterdayBalance: number
  todayBalance: number
  initialMargin: number
  maintenanceMargin: number
  clearingMargin: number
  todayEquity: number
  todayDeposit: number
  todayWithdrawal: number
  todayTradingFee: number
  todayTradingTax: number
  receivablePremium: number
  payablePremium: number
  excessMargin: number
  availableMargin: number
  disgorgement: number
  optPnl: number
  optValue: number
  optLongValue: number
  optShortValue: number
  futRealizedPnl: number
  futUnrealizedPnl: number
  buyLot: number
  sellLot: number
}
export interface CloseRecord {
  date: string
  branchNo: string
  account: string
  positionKind: number
  orderNo: string
  orderType: FutOptOrderType
  market: string
  symbol: string
  expiryDate: string
  strikePrice?: number
  callPut?: CallPut
  buySell: BSAction
  price: number
  origLots: number
  transactionFee?: number
  tax?: number
}
export interface FutOptOrderResult {
  functionType?: number
  /**日期 v */
  date: string
  seqNo: string
  /** 帳號 */
  branchNo: string
  /** 帳號 */
  account: string
  /**委託書號 v */
  orderNo?: string
  /** 資產類別 */
  assetType?: number
  /** 市場 v */
  market?: string
  /** 市場 */
  marketType: FutOptMarketType
  /** 商品代碼 v */
  symbol?: string
  /** 交易單位 */
  unit?: number
  /** 幣別 */
  currency?: string
  /** 到期日 */
  expiryDate?: string
  /** 履約價 */
  strikePrice?: number
  callPut?: CallPut
  /** 買賣別  v */
  buySell?: BSAction
  /** 商品代碼2 */
  symbolLeg2?: string
  /** 到期月份2 */
  expiryDateLeg2?: string
  /** 履約價2 */
  strikePriceLeg2?: number
  /** 買賣權2 */
  callPutLeg2?: CallPut
  /** 買賣別2 */
  buySellLeg2?: BSAction
  priceType?: FutOptPriceType
  /** 價格 v */
  price?: number
  /** 有效價格 */
  afterPrice?: number
  lot?: number
  /** 有效股數 */
  afterLot?: number
  /** 條件別 v */
  timeInForce?: TimeInForce
  /** 交易別 */
  orderType?: FutOptOrderType
  /** 狀態 */
  status?: number
  /** 是否預約單 */
  isPreOrder: boolean
  /** 異動後委託價格別 */
  afterPriceType?: FutOptPriceType
  /** 成交股/口數 v */
  filledLot?: number
  /** 成交價金 */
  filledMoney?: number
  /** 原始有效股數 */
  beforeLot?: number
  /** 原始有效價格 */
  beforePrice?: number
  userDef?: string
  /** 異動時間 */
  lastTime: string
  details?: Array<FutOptOrderDetail>
  errorMessage?: string
}
export interface FutOptOrderDetail {
  functionType?: number
  modifiedTime: string
  beforeLot?: number
  afterLot?: number
  beforePrice?: number
  afterPrice?: number
  filledMoney?: number
  errorMessage?: string
  status?: number
  errMsg?: string
}
export interface HybridPosition {
  date: string
  branchNo: string
  account: string
  isSpread: boolean
  positionKind: number
  symbol: string
  expiryDate: string
  strikePrice?: number
  callPut?: CallPut
  buySell: BSAction
  price?: number
  origLots: number
  tradableLot: number
  orderType?: FutOptOrderType
  currency?: string
  marketPrice: string
  initialMargin: number
  maintenanceMargin: number
  clearingMargin: number
  initialMarginAllSingle: number
  optValue: number
  optLongValue: number
  optShortValue: number
  profitOrLoss: number
  premium: number
  spreads?: Array<SpreadPosition>
}
export interface SpreadPosition {
  date: string
  branchNo: string
  account: string
  positionKind: number
  symbol: string
  expiryDate: string
  strikePrice?: number
  callPut?: CallPut
  buySell: BSAction
  price?: number
  origLots: number
  tradableLot: number
  orderType?: FutOptOrderType
  currency?: string
  marketPrice: string
  initialMargin: number
  maintenanceMargin: number
  clearingMargin: number
  initialMarginAllSingle: number
  optValue: number
  optLongValue: number
  optShortValue: number
  profitOrLoss: number
  premium: number
}
export interface EstimateMargin {
  date: string
  currency: string
  estimateMargin: number
}
export interface Position {
  date: string
  branchNo: string
  account: string
  positionKind: number
  orderNo: string
  symbol: string
  expiryDate: string
  strikePrice?: number
  callPut?: CallPut
  buySell: BSAction
  price?: number
  origLots: number
  tradableLot: number
  orderType?: FutOptOrderType
  currency?: string
  profitOrLoss: number
  marketPrice: string
  initialMargin: number
  maintenanceMargin: number
  clearingMargin: number
  premium: number
}
export interface FutOptFilledData {
  date: string
  branchNo: string
  account: string
  orderNo: string
  symbol: string
  buySell: BSAction
  orderType: FutOptOrderType
  seqNo?: string
  userDef?: string
  filledNo: string
  filledAvgPrice: number
  filledLot: number
  filledPrice: number
  filledTime: string
  /** 到期日 */
  expiryDate?: string
  /** 履約價 */
  strikePrice?: number
  callPut?: CallPut
  /** 商品代碼2 */
  symbolLeg2?: string
  /** 到期月份2 */
  expiryDateLeg2?: string
  /** 履約價2 */
  strikePriceLeg2?: number
  /** 買賣權2 */
  callPutLeg2?: CallPut
  /** 買賣別2 */
  buySellLeg2?: BSAction
}
export interface BankRemain {
  branchNo: string
  account: string
  currency: string
  balance: number
  availableBalance: number
}
export interface BatchResult {
  functionType: number
  date: string
  /** 帳號 */
  branchNo: string
  /** 帳號 */
  account: string
  batchSeqNo: string
}
export interface FilledData {
  date: string
  branchNo: string
  account: string
  orderNo: string
  stockNo: string
  buySell: BSAction
  orderType: OrderType
  seqNo?: string
  filledNo: string
  filledAvgPrice: number
  filledQty: number
  filledPrice: number
  filledTime: string
  userDef?: string
}
export interface Inventory {
  date: string
  account: string
  branchNo: string
  stockNo: string
  orderType: OrderType
  lastdayQty: number
  buyQty: number
  buyFilledQty: number
  buyValue: number
  todayQty: number
  tradableQty: number
  sellQty: number
  sellFilledQty: number
  sellValue: number
  odd: InventoryOdd
}
export interface InventoryOdd {
  lastdayQty: number
  buyQty: number
  buyFilledQty: number
  buyValue: number
  todayQty: number
  tradableQty: number
  sellQty: number
  sellFilledQty: number
  sellValue: number
}
export interface MaintenanceData {
  date: string
  branchNo: string
  account: string
  maintenanceSummary: MaintenanceSummary
  maintenanceDetail: Array<MaintenanceDetail>
}
export interface MaintenanceSummary {
  marginValue: number
  shortsellValue: number
  shortsellMargin?: number
  collateral?: number
  marginLoanAmt: number
  maintenanceRatio: number
}
export interface MaintenanceDetail {
  stockNo: string
  orderNo: string
  orderType?: OrderType
  quantity?: number
  price?: number
  costPrice?: number
  shortsellMargin?: number
  collateral?: number
  marginLoanAmt?: number
  maintenanceRatio?: number
  collateralInterest?: number
  marginInterest?: number
  shortsellInterest?: number
}
export interface DayTradeStockInfo {
  stockNo?: string
  date: string
  daytradeOrigQuota?: number
  daytradeTradableQuota?: number
  precollectSingle?: number
  precollectAccumulate?: number
  status?: number
}
export interface MarginShortQuota {
  stockNo?: string
  date: string
  shortsellOrigQuota?: number
  shortsellTradableQuota?: number
  marginOrigQuota?: number
  marginTradableQuota?: number
  marginRatio?: number
  shortRatio?: number
}
export interface ModifyPrice {
  /** 委託單號 */
  txse: string
  /** 委託書號 */
  orderNo: string
  /** 日期 */
  date: string
  /** 資產類別 */
  asty: string
  priceType: PriceType
  /** 商品代碼 */
  stockNo: string
  /** 異動後有效價格 */
  newPrice?: string
  /** 價格別異動 */
  newPriceType?: PriceType
}
export interface ModifyQuantity {
  /** 委託單號 */
  txse: string
  /** 委託書號 */
  orderNo: string
  /** 日期 */
  date: string
  /** 資產類別 */
  asty: string
  marketType: MarketType
  /** 商品代碼 */
  stockNo: string
  /** 異動後有效總量 */
  newQuantity: number
}
export interface OrderResult {
  functionType?: number
  /**日期 v */
  date: string
  seqNo: string
  /** 帳號 */
  branchNo: string
  /** 帳號 */
  account: string
  /**委託書號 v */
  orderNo?: string
  /** 資產類別 */
  assetType?: number
  /** 市場 v */
  market?: string
  /** 市場 */
  marketType: MarketType
  /** 商品代碼 v */
  stockNo?: string
  /** 買賣別  v */
  buySell?: BSAction
  priceType?: PriceType
  /** 價格 v */
  price?: number
  quantity?: number
  /** 條件別 v */
  timeInForce?: TimeInForce
  /** 交易別 */
  orderType?: OrderType
  /** 是否預約單 */
  isPreOrder: boolean
  /** 狀態 */
  status?: number
  /** 異動後委託價格別 */
  afterPriceType?: PriceType
  /** 有效價格 */
  afterPrice?: number
  /** 交易單位 */
  unit?: number
  /** 有效股數 */
  afterQty?: number
  /** 成交股/口數 v */
  filledQty?: number
  /** 成交價金 */
  filledMoney?: number
  /** 原始有效股數 */
  beforeQty?: number
  /** 原始有效價格 */
  beforePrice?: number
  userDef?: string
  /** 異動時間 */
  lastTime: string
  details?: Array<OrderDetail>
  errorMessage?: string
}
export interface OrderDetail {
  functionType?: number
  modifiedTime: string
  beforeQty?: number
  afterQty?: number
  beforePrice?: number
  afterPrice?: number
  filledMoney?: number
  status?: number
  errMsg?: string
}
export interface Realized {
  date: string
  branchNo: string
  account: string
  stockNo: string
  buySell: BSAction
  filledQty: number
  filledPrice: number
  orderType: OrderType
  realizedProfit: number
  realizedLoss: number
}
export interface RealizedSummary {
  startDate: string
  endDate: string
  branchNo: string
  account: string
  stockNo: string
  buySell: BSAction
  orderType: OrderType
  filledQty: number
  filledAvgPrice: number
  realizedProfitAndLoss: number
}
export interface SettlementData {
  account: AccountRes
  details?: Array<Settlement>
}
export interface Settlement {
  date: string
  settlementDate?: string
  buyValue?: number
  buyFee?: number
  buySettlement?: number
  buyTax?: number
  sellValue?: number
  sellFee?: number
  sellSettlement?: number
  sellTax?: number
  totalBsValue?: number
  totalFee?: number
  totalTax?: number
  totalSettlementAmount?: number
  currency?: string
}
export interface Unrealized {
  date: string
  account: string
  branchNo: string
  stockNo: string
  buySell: BSAction
  orderType: OrderType
  costPrice: number
  tradableQty: number
  todayQty: number
  unrealizedProfit: number
  unrealizedLoss: number
}
export interface AccountRes {
  branchNo: string
  account: string
}
export const enum FutOptConditionMarketType {
  Future = 'Future',
  Option = 'Option',
  FutureNight = 'FutureNight',
  OptionNight = 'OptionNight'
}
export const enum FutOptConditionOrderType {
  New = 'New',
  Close = 'Close'
}
export const enum FutOptConditionPriceType {
  Limit = 'Limit',
  Market = 'Market',
  BidPrice = 'BidPrice',
  AskPrice = 'AskPrice',
  MatchedPrice = 'MatchedPrice',
  LimitUp = 'LimitUp',
  LimitDown = 'LimitDown',
  Reference = 'Reference',
  RangeMarket = 'RangeMarket'
}
export const enum ConditionMarketType {
  Common = 'Common',
  Fixing = 'Fixing',
  Odd = 'Odd',
  IntradayOdd = 'IntradayOdd'
}
export const enum ConditionOrderType {
  Stock = 'Stock',
  Margin = 'Margin',
  Short = 'Short',
  DayTrade = 'DayTrade'
}
export const enum ConditionPriceType {
  Limit = 'Limit',
  Market = 'Market',
  BidPrice = 'BidPrice',
  AskPrice = 'AskPrice',
  MatchedPrice = 'MatchedPrice',
  LimitUp = 'LimitUp',
  LimitDown = 'LimitDown',
  Reference = 'Reference'
}
export const enum TradingType {
  Reference = 'Reference',
  Index = 'Index',
  Scheduled = 'Scheduled'
}
export const enum Operator {
  GreaterThanOrEqual = 'GreaterThanOrEqual',
  LessThanOrEqual = 'LessThanOrEqual',
  GreaterThan = 'GreaterThan',
  LessThan = 'LessThan'
}
export const enum TriggerContent {
  BidPrice = 'BidPrice',
  AskPrice = 'AskPrice',
  MatchedPrice = 'MatchedPrice',
  TotalQuantity = 'TotalQuantity',
  TotalValue = 'TotalValue',
  Time = 'Time'
}
export const enum TimeSliceOrderType {
  Type1 = 'Type1',
  Type2 = 'Type2',
  Type3 = 'Type3',
  Type4 = 'Type4',
  Type5 = 'Type5',
  Type6 = 'Type6',
  Type7 = 'Type7'
}
export const enum StopSign {
  Full = 'Full',
  Partial = 'Partial',
  UntilEnd = 'UntilEnd'
}
export const enum ConditionStatus {
  Type1 = 'Type1',
  Type2 = 'Type2',
  Type3 = 'Type3',
  Type4 = 'Type4',
  Type5 = 'Type5',
  Type6 = 'Type6',
  Type7 = 'Type7',
  Type8 = 'Type8',
  Type9 = 'Type9',
  Type10 = 'Type10',
  Type11 = 'Type11'
}
export const enum HistoryStatus {
  Type1 = 'Type1',
  Type2 = 'Type2',
  Type3 = 'Type3',
  Type4 = 'Type4',
  Type5 = 'Type5',
  Type6 = 'Type6'
}
export interface Condition {
  marketType: TradingType
  symbol: string
  trigger: TriggerContent
  triggerValue: string
  comparison: Operator
}
export interface TpslOrder {
  /** ROD/FOK/IOC */
  timeInForce: TimeInForce
  /** 價格別 */
  priceType: ConditionPriceType
  /** 交易別 */
  orderType: ConditionOrderType
  /** 價格 */
  targetPrice: string
  /** 價格 */
  price?: string
}
export interface FutOptTpslOrder {
  /** ROD/FOK/IOC */
  timeInForce: TimeInForce
  /** 價格別 */
  priceType: FutOptConditionPriceType
  /** 交易別 */
  orderType: FutOptConditionOrderType
  /** 價格 */
  targetPrice: string
  /** 價格 */
  price?: string
}
export interface TpslWrapper {
  stopSign: StopSign
  tp?: TpslOrder
  sl?: TpslOrder
  endDate?: string
  intraday?: boolean
}
export interface FutOptTpslWrapper {
  stopSign: StopSign
  tp?: FutOptTpslOrder
  sl?: FutOptTpslOrder
  endDate?: string
  intraday?: boolean
}
export interface SplitDescription {
  method: TimeSliceOrderType
  interval: number
  singleQuantity: number
  totalQuantity?: number
  startTime: string
  endTime?: string
}
export interface ConditionDetailResult {
  responses?: Array<ConditionDetail>
  reply: Reply
}
export interface ConditionDetail {
  guid: string
  batchNo: string
  orderLevel: string
  lastTime: string
  conditionType?: string
  parentGuid?: string
  symbol: string
  orderAmount: string
  childBatchNo: string
  account: string
  conditionContent: string
  action: string
  conditionBuySell: string
  conditionSymbol: string
  conditionPrice: string
  conditionVolume: string
  conditionFilledVolume: string
  createTime: string
  startDate: string
  status: string
  errorMessage?: string
  detailRecordsCount: string
  detailRecords: Array<ParentChildRecord>
  tpslCount: string
  tpslRecord: Array<ParentChildRecord>
}
export interface ParentChildRecord {
  guid?: string
  account: string
  conditionContent: string
  action: string
  conditionBuySell: string
  conditionSymbol: string
  conditionPrice: string
  conditionVolume: string
  conditionFilledVolume: string
  startDate: string
  status: string
  errorMessage: string
}
export interface ConditionResult {
  smartOrderResponse: ConditionOrderResult
  reply: Reply
}
export interface CancelResult {
  reply: Reply
}
export interface ConditionOrderResult {
  guid?: string
}
export interface Reply {
  replyCode: string
  advisory: string
}
export interface ConditionDayTrade {
  dayTradeEndTime: string
  autoCancel: boolean
  price?: string
  priceType: ConditionPriceType
}
export interface ConditionOrder {
  buySell: BSAction
  symbol: string
  price?: string
  quantity: number
  marketType: ConditionMarketType
  priceType: ConditionPriceType
  timeInForce: TimeInForce
  orderType: ConditionOrderType
}
export interface FutOptConditionOrder {
  /** 盤別 */
  marketType: FutOptConditionMarketType
  /** 買賣別 */
  buySell: BSAction
  /** 商品代碼 */
  symbol: string
  /** 價格別 */
  priceType: FutOptConditionPriceType
  /** 價格 */
  price?: string
  /** 股/口數 */
  lot?: number
  /** ROD/FOK/IOC */
  timeInForce: TimeInForce
  /** 交易別 */
  orderType: FutOptConditionOrderType
}
export interface TrailOrder {
  /** 交易類別 */
  symbol: string
  price: string
  direction: Direction
  percentage: number
  buySell: BSAction
  quantity: number
  priceType: ConditionPriceType
  diff: number
  timeInForce: TimeInForce
  orderType: ConditionOrderType
}
export interface FutOptTrailOrder {
  /** 交易類別 */
  symbol: string
  price: string
  direction: Direction
  tickNum: number
  buySell: BSAction
  lot: number
  priceType: FutOptConditionPriceType
  diff: number
  timeInForce: TimeInForce
  orderType: FutOptConditionOrderType
}
export const enum Direction {
  Up = 'Up',
  Down = 'Down'
}
export interface Recover {
  branchNo: string
  account: string
  accountType: string
  recoverType: string
  recoverCount: number
}
export const enum BSAction {
  Buy = 'Buy',
  Sell = 'Sell',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum TimeInForce {
  ROD = 'ROD',
  FOK = 'FOK',
  IOC = 'IOC',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum OrderType {
  Stock = 'Stock',
  Margin = 'Margin',
  Short = 'Short',
  SBL = 'SBL',
  DayTrade = 'DayTrade',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum FutOptOrderType {
  New = 'New',
  Close = 'Close',
  Auto = 'Auto',
  FdayTrade = 'FdayTrade',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum PriceType {
  Limit = 'Limit',
  Market = 'Market',
  LimitUp = 'LimitUp',
  LimitDown = 'LimitDown',
  Reference = 'Reference',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum FutOptPriceType {
  Limit = 'Limit',
  Market = 'Market',
  RangeMarket = 'RangeMarket',
  Reference = 'Reference',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum MarketType {
  Common = 'Common',
  Fixing = 'Fixing',
  Odd = 'Odd',
  IntradayOdd = 'IntradayOdd',
  Emg = 'Emg',
  EmgOdd = 'EmgOdd',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum FutOptMarketType {
  Future = 'Future',
  Option = 'Option',
  FutureNight = 'FutureNight',
  OptionNight = 'OptionNight',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum Oxtp {
  NewOrder = 'NewOrder',
  ModifyPrice = 'ModifyPrice',
  ModifyQuantity = 'ModifyQuantity',
  CancelOrder = 'CancelOrder',
  BatchOrderList = 'BatchOrderList',
  BatchOrderDetail = 'BatchOrderDetail',
  EstimateMargin = 'EstimateMargin',
  UnSupported = 'UnSupported',
  UnDefined = 'UnDefined'
}
export const enum CallPut {
  Call = 'Call',
  Put = 'Put',
  UnDefined = 'UnDefined'
}
export interface OrderObject {
  buySell: BSAction
  symbol: string
  quantity: number
  marketType: MarketType
  priceType: PriceType
  timeInForce: TimeInForce
  orderType: OrderType
  price?: string
  userDef?: string
}
export interface FutOptOrderObject {
  buySell: BSAction
  symbol: string
  buySell2?: BSAction
  symbol2?: string
  price?: string
  lot: number
  marketType: FutOptMarketType
  priceType: FutOptPriceType
  timeInForce: TimeInForce
  orderType: FutOptOrderType
  userDef?: string
}
export interface Response<T> {
  isSuccess: boolean
  data?: T
  message?: string
}
export interface OrderResponse {
  isSuccess: boolean
  data?: OrderResult
  message?: string
}
export interface FutOptOrderResponse {
  isSuccess: boolean
  data?: FutOptOrderResult
  message?: string
}
export interface VecFutOptOrderResponse {
  isSuccess: boolean
  data?: Array<FutOptOrderResult>
  message?: string
}
export interface VecOrderResponse {
  isSuccess: boolean
  data?: Array<OrderResult>
  message?: string
}
export interface LoginResponse {
  isSuccess: boolean
  data?: Array<JsAccount>
  message?: string
}
export interface FilledResponse {
  isSuccess: boolean
  data?: Array<FilledData>
  message?: string
}
export interface DayTradeStockInfoResponse {
  isSuccess: boolean
  data?: DayTradeStockInfo
  message?: string
}
export interface MarginShortQuotaResponse {
  isSuccess: boolean
  data?: MarginShortQuota
  message?: string
}
export interface BatchResponse {
  isSuccess: boolean
  data?: Array<BatchResult>
  message?: string
}
export interface UnRealizedResponse {
  isSuccess: boolean
  data?: Array<Unrealized>
  message?: string
}
export interface RealizedResponse {
  isSuccess: boolean
  data?: Array<Realized>
  message?: string
}
export interface RealizedSummaryResponse {
  isSuccess: boolean
  data?: Array<RealizedSummary>
  message?: string
}
export interface SettlementResponse {
  isSuccess: boolean
  data?: SettlementData
  message?: string
}
export interface MaintenanceResponse {
  isSuccess: boolean
  data?: MaintenanceData
  message?: string
}
export interface InventoryResponse {
  isSuccess: boolean
  data?: Array<Inventory>
  message?: string
}
export interface BankRemainResponse {
  isSuccess: boolean
  data?: BankRemain
  message?: string
}
export interface EstimateMarginResponse {
  isSuccess: boolean
  data?: EstimateMargin
  message?: string
}
export interface VecEquityResponse {
  isSuccess: boolean
  data?: Array<Equity>
  message?: string
}
export interface VecCloseRecordResponse {
  isSuccess: boolean
  data?: Array<CloseRecord>
  message?: string
}
export interface VecFutOptHybridPositionResponse {
  isSuccess: boolean
  data?: Array<HybridPosition>
  message?: string
}
export interface VecFutOptPositionResponse {
  isSuccess: boolean
  data?: Array<Position>
  message?: string
}
export interface VecFutOptFilledResponse {
  isSuccess: boolean
  data?: Array<FutOptFilledData>
  message?: string
}
export interface ConditionOrderResultResponse {
  isSuccess: boolean
  data?: ConditionOrderResult
  message?: string
}
export interface VecConditionDetailResponse {
  isSuccess: boolean
  data?: Array<ConditionDetail>
  message?: string
}
export interface StringResponse {
  isSuccess: boolean
  data?: string
  message?: string
}
export interface VecRecoverResponse {
  isSuccess: boolean
  data?: Array<Recover>
  message?: string
}
export interface Account {
  name: string
  branchNo: string
  account: string
  accountType: string
}
export type JsAccounting = Accounting
export declare class Accounting {
  constructor()
  /**
   * Checks your unrealized gain and loss detail.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing one or more unrealizedData objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2021/08/09",
   *       "account": "26",
   *       "branchNo": "6460",
   *       "stockNo": "2303",
   *       "buySell": Common,
   *       "orderType": Margin,
   *       "costPrice": 50.0,
   *       "tradableQty": 1000,
   *       "todayQty": 1000,
   *       "unrealizedProfit": 48650,
   *       "unrealizedLoss": 0
   *     },
   *     // ...
   *   ]
   * }
   */
  unrealizedGainsAndLoses(account: Account): Response<Array<Assets>>
  /**
   * Checks account realized gain and loss detail.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing one or more realized objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/17",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "stockNo": "1101",
   *       "buySell": Sell,
   *       "filledQty": 1000,
   *       "filledPrice": 35.0,
   *       "orderType": Stock,
   *       "realizedProfit": 0,
   *       "realizedLoss": 203
   *     },
   *     // ...
   *   ]
   * }
   */
  realizedGainsAndLoses(account: Account): Response<Array<Realized>>
  /**
   * Checks account realized gain and loss summary.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing one or more realizedSummary objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "startDate": "20231011",
   *       "endDate": "20231018",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "stockNo": "1101",
   *       "buySell": Sell,
   *       "orderType": Common,
   *       "filledQty": 1000,
   *       "filledAvgPrice": 35.0,
   *       "realizedProfitAndLoss": -203
   *     },
   *     // ...
   *   ]
   * }
   */
  realizedGainsAndLosesSummary(account: Account): Response<Array<RealizedSummary>>
  /**
   * Checks account's settlement amount.
   *
   * @param account (Account): Ordering account.
   * @param range (string): Time range, valid values are `0d` and `3d`.
   * @returns An object containing account settlement data.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "account": {
   *       "branchNo": "6460",
   *       "account": "26"
   *     },
   *     "data": [
   *       {
   *         "date": "2023/10/16"
   *       },
   *       {
   *         "date" : "2023/10/17",
   *         "settlementDate": "2023/10/19",
   *         "buyValue": 2261470,
   *         "buyFee": 1065,
   *         "buySettlement": -3895335,
   *         "buyTax": 0,
   *         "sellValue": 2488170,
   *         "sellFee": 1137,
   *         "sellSettlement": 677626,
   *         "sellTax": 7412,
   *         "totalBsValue": 4749640,
   *         "totalFee": 2202,
   *         "totalSettlementAmount": -3217709,
   *         "totalTax": 7412,
   *         "currency": "TWD"
   *       },
   *       {
   *         "date": "2023/10/18"
   *       }
   *     ]
   *   }
   * }
   */
  querySettlement(account: Account, range: string): Response<SettlementResponse>
  /**
   * Checks account's maintenance data.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing account maintenance information and inventory maintenance data.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "date": "2023/10/18",
   *     "branchNo": "6460",
   *     "account": "26",
   *     "maintenanceSummary": {
   *       "marginValue": 1051000,
   *       "shortsellValue": 97800,
   *       "shortsellMargin": 154000,
   *       "collateral": 154300,
   *       "marginLoanAmt": 723000,
   *       "maintenanceRatio": 165.6067
   *     },
   *     "maintenanceDetail": [
   *       {
   *         "stockNo": "2303",
   *         "orderNo": "y0002",
   *         "orderType": Margin,
   *         "quantity": 1000,
   *         "price": 48.8,
   *         "costPrice": 50,
   *         "marketValue": 48800,
   *         "shortsellMargin": 0,
   *         "collateral": 0,
   *         "marginLoanAmt": 30000,
   *         "maintenanceRatio": 162.6667,
   *         "marginOrShortRatio": 60.0
   *       }
   *     ]
   *   }
   * }
   */
  maintenance(account: Account): Response<MaintenanceData>
  /**
   * Checks your inventories data and transactions record.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing one or more inventory objects.
   *
   * @example
   * // For Example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/16",
   *       "account": "26",
   *       "branchNo": "6460",
   *       "stockNo": "1101",
   *       // ...
   *       "tradableQty": 2000,
   *       "sellQty": 0,
   *       "sellFilledQty": 0,
   *       "sellValue": 0,
   *       "odd": {
   *         "lastdayQty": 0,
   *         "buyQty": 0,
   *         "buyFilledQty": 0,
   *         "buyValue": 0,
   *         // ...
   *       }
   *     },
   *     {
   *       "date": "2023/10/16",
   *       "account": "26",
   *       "branchNo": "6460",
   *       "stockNo": "1101",
   *       // ...
   *       "tradableQty": 2000,
   *       "sellQty": 0,
   *       "sellFilledQty": 0,
   *       "sellValue": 0,
   *       "odd": {
   *         "lastdayQty": 0,
   *         "buyQty": 0,
   *         "buyFilledQty": 0,
   *         "buyValue": 0,
   *         // ...
   *       }
   *     }
   *   ]
   * }
   */
  inventories(account: Account): Response<Array<Inventory>>
  /**
   * Queries bank remains balance.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing bank remains balance data.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "branchNo": "6460",
   *     "account": "26",
   *     "currency": "TWD",
   *     "balance": 666666,
   *     "availableBalance": 123456
   *   }
   * }
   */
  bankRemain(account: Account): Response<BankRemain>
}
export type JsFutOpt = FutOpt
export declare class FutOpt {
  constructor()
  /**
   * Send in a new order
   *
   * @param account - Ordering account
   * @param order - The order content
   * @param unblock - Using unblock mode; default: False
   * @returns An object contains order information. (if using unblock mode, the order result may not contain whole information.)
   * @example
   * const futoptorder = {
   *   buySell: BSAction.Buy,
   *   symbol: "TXO20000E4",
   *   price: "530",
   *   lot: 1,
   *   marketType: FutOptMarketType.Option,
   *   priceType: FutOptPriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: FutOptOrderType.Auto,
   *   userDef: "From nodejs" // optional field
   * }
   * sdk.futopt.placeOrder(account, futoptorder)
   */
  placeOrder(account: JsAccount, order: JsFutOptOrder, unblock?: boolean | undefined | null): Response<FutOptOrderResult>
  /**
   * Cancel an active order
   *
   * @param account - Ordering account
   * @param order_res - Order to be deleted
   * @param unblock - Using unblock mode; default: False
   * @returns An object contains modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: {
   *     functionType: 30,
   *     date: "2024/03/25",
   *     seqNo: "03100161319",
   *     branchNo: "15901",
   *     account: "1234567",
   *     orderNo: "l001D",
   *     assetType: 1,
   *     market: "TAIMEX",
   *     marketType: FutureNight,
   *     ...
   *   }
   * }
   */
  cancelOrder(account: JsAccount, orderRes: FutOptOrderResult, unblock?: boolean | undefined | null): Response<FutOptOrderResult>
  /**
   * Set price change for order
   *
   * @param order - Order to be modified
   * @param price - Modify price (If the 'priceType' field is entered, this field should be None or empty)
   * @param priceType - Modify price type (If the 'price' field is entered, this field should be None or empty)
   * @returns An object contains the order are prepared modify price
   * @example
   * // 1. Using getOrderResult retrieve FutOptOrderResult
   * const order_res = sdk.futopt.getOrderResults(accounts.data[0])
   * const target_order = order_res.data[0]
   *
   * const modifyPrice_obj = sdk.futopt.makeModifyPriceObj(target_order, "500")
   */
  makeModifyPriceObj(order: FutOptOrderResult, price?: string | undefined | null, priceType?: FutOptPriceType | undefined | null): FutOptModifyPrice
  /**
   * Set lot change for order
   *
   * @param target_order - Order for lot adjustment
   * @param lot - Modify lot
   * @returns An object contains the order are prepared modify lot
   * @example
   * // 1. Using getOrderResults retrieve FutOptOrderResult
   * const order_res = sdk.futopt.getOrderResults(accounts.data[0,FutOptMarketType.FutureNight)
   * const target_order = order_res.data[0]
   *
   * const modifyLot_obj = sdk.futopt.makeModifyLotObj(target_order, 2)
   */
  makeModifyLotObj(order: FutOptOrderResult, lot: number): FutOptModifyLot
  /**
   * Modify order price
   *
   * @param account - Ordering account
   * @param order_res - Object for price adjustment
   * @param unblock - Using unblock mode; default: False
   * @returns An object contains modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: {
   *     functionType: 15,
   *     date: "2024/03/25",
   *     seqNo: "00230177010",
   *     branchNo: "15901",
   *     account: "1234567",
   *     orderNo: "C0002",
   *     ...
   *   }
   * }
   */
  modifyPrice(account: JsAccount, orderRes: FutOptModifyPrice, unblock?: boolean | undefined | null): Response<FutOptOrderResult>
  /**
   * Modify order lot
   *
   * @param account - Ordering account
   * @param order_res - Object for lot adjustment
   * @param unblock - Using unblock mode; default: False
   * @returns An object contains modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: {
   *     functionType: 20,
   *     date: "2024/03/25",
   *     seqNo: "03100161319",
   *     branchNo: "15901",
   *     account: "1234567",
   *     orderNo: "l001D",
   *     assetType: 1,
   *     market: "TAIMEX",
   *     marketType: FutureNight,
   *     ...
   *   }
   * }
   */
  modifyLot(account: JsAccount, orderRes: FutOptModifyLot, unblock?: boolean | undefined | null): Response<FutOptOrderResult>
  /**
   * Query symbol require margin
   *
   * @param account - Ordering account
   * @param order - The order content
   * @returns A object contains estimate margin data
   * @example
   * {
   *   isSuccess: true,
   *   data: {
   *     date: "2024/04/10",
   *     currency: "TWD",
   *     estimateMargin: 179000
   *   }
   * }
   */
  queryEstimateMargin(account: JsAccount, order: JsFutOptOrder): Response<EstimateMargin>
  /**
   * Get today’s all orders; active, canceled, or filled.
   *
   * @param account - The account want to query
   * @param market_type - The market type want to query
   * @returns A list contains one or more result objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000001",
   *       branchNo: "6460",
   *       ...
   *     },
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000002",
   *       branchNo: "6460",
   *       .........
   *     }
   *   ]
   * }
   */
  getOrderResults(account: JsAccount, marketType?: FutOptMarketType | undefined | null): Response<Array<FutOptOrderResult>>
  /**
   * Get today’s all orders; active, canceled, or filled (include order process).
   *
   * @param account - The account want to query
   * @param market_type - The market type want to query
   * @returns A list contains one or more result objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000001",
   *       branchNo: "6460",
   *       ...
   *     },
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000002",
   *       branchNo: "6460",
   *       .........
   *     }
   *   ]
   * }
   */
  getOrderResultsDetail(account: JsAccount, marketType?: FutOptMarketType | undefined | null): Response<Array<FutOptOrderResult>>
  /**
   * Retrieve order in the record
   *
   * @param account - Ordering account
   * @param start_date - Query record start date
   * @param end_date - Query record end date (if empty will fill in today automatically)
   * @param market_type - Query record market type
   * @returns A list contains one or more result objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000001",
   *       branchNo: "6460",
   *       ...
   *     },
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000002",
   *       branchNo: "6460",
   *       .........
   *     }]
   * }
   */
  orderHistory(account: JsAccount, startDate: string, endDate: string, marketType?: FutOptMarketType | undefined | null): Response<Array<FutOptOrderResult>>
  /**
   * Retrieve filled data in the record
   *
   * @param account - Query specify account
   * @param market_type - Query record market type
   * @param start_date - Query record start date
   * @param end_date - Query record end date (if empty will fill in today automatically)
   * @returns A list contains one or more filled data objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2023/09/15",
   *       branchNo: "6460",
   *       account: "26",
   *       orderNo: "bA422",
   *       seqNo: None,
   *       symbol: "FITX",
   *       expiryDate: "202404",
   *       strikePrice: None,
   *       callPut: None,
   *       buySell: Buy,
   *       symbolLeg2: None,
   *       expiryDate_leg2: None,
   *       strikePrice_leg2: None,
   *       callPutLeg2: None,
   *       buySellLeg2: None,
   *       filledNo: "00000000001",
   *       filledAvgPrice: 20890.0,
   *       filledLots: 1,
   *       filledPrice: 20890.0,
   *       orderType: New,
   *       filledTime: "10:31:00.931"
   *       userDef: None
   *     }
   *   ]
   * }
   */
  filledHistory(account: JsAccount, marketType: FutOptMarketType, startDate: string, endDate?: string | undefined | null): Response<Array<FutOptFilledData>>
  /**
   * Send in a new batch order
   *
   * @param account - Ordering account
   * @param orders - The order list content
   * @returns A list contains one or more order result objects
   * @example
   * const orders = [{
   *   buySell: BSAction.Buy,
   *   symbol: "TXO20000E4",
   *   price: "530",
   *   lot: 1,
   *   marketType: FutOptMarketType.Option,
   *   priceType: FutOptPriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: FutOptOrderType.Auto,
   *   userDef: "From nodejs"
   * },{
   *   buySell: BSAction.Buy,
   *   symbol: "TXO20000E4",
   *   price: "530",
   *   lot: 1,
   *   marketType: FutOptMarketType.Option,
   *   priceType: FutOptPriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: FutOptOrderType.Auto,
   *   userDef: "From nodejs" // optional field
   * }];
   *
   * const batch_order_results = sdk.futopt.batchPlaceOrder(account,orders);
   */
  batchPlaceOrder(account: JsAccount, orders: Array<JsFutOptOrder>): Response<Array<FutOptOrderResult>>
  /**
   * Batch modify order lot
   *
   * @param account - Ordering account
   * @param orders - Object list for lot adjustment
   * @returns A list contains one or more modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       functionType: 20,
   *       date: "2024/03/25",
   *       seqNo: "03100161319",
   *       ...
   *     },
   *     {
   *       functionType: 20,
   *       date: "2024/03/25",
   *       seqNo: "03100161319",
   *       ...
   *     }
   *   ]
   * }
   */
  batchModifyLot(account: JsAccount, orders: Array<FutOptModifyLot>): Response<Array<FutOptOrderResult>>
  /**
   * Batch Modify order price
   *
   * @param account - Ordering account
   * @param orders - Object list for price adjustment
   * @returns A list contains one or more modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     ({
   *       functionType: 15,
   *       date: "2024/03/25",
   *       seqNo: "00110212663",
   *       branchNo: "15901",
   *       account: "1234567",
   *       orderNo: "C0005",
   *       assetType: 1,
   *       ...
   *       lot: 1,
   *       timeInForce: ROD,
   *       orderType: New,
   *       isPreOrder: False,
   *       status: 10,
   *       afterPriceType: Limit,
   *       afterPrice: 19900,
   *       afterLot: 1,
   *       filledLot: 0,
   *       filledMoney: 0,
   *       beforeLot: 0,
   *       beforePrice: 20000,
   *       lastTime: "13:39:05",
   *     }),
   *     ({
   *       functionType: 15,
   *       date: "2024/03/25",
   *       seqNo: "00110212664",
   *       branchNo: "15901",
   *       account: "1234567",
   *       orderNo: "C0006",
   *       assetType: 1,
   *       ...
   *       lot: 1,
   *       timeInForce: ROD,
   *       orderType: New,
   *       isPreOrder: False,
   *       status: 10,
   *       afterPriceType: Limit,
   *       afterPrice: 19900,
   *       afterLot: 1,
   *       filledLot: 0,
   *       filled_money: 0,
   *       beforeLot: 0,
   *       beforePrice: 20000,
   *       lastTime: "13:39:05",
   *     })
   *   ]
   * }
   */
  batchModifyPrice(account: JsAccount, orders: Array<FutOptModifyPrice>): Response<Array<FutOptOrderResult>>
  /**
   * Batch cancel  active order
   *
   * @param account - Ordering account
   * @param orders - Order list to be cancel
   * @returns A list contains one or more modified order information
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       functionType: 30,
   *       date: "2024/03/25",
   *       seqNo: "00110212608",
   *       branchNo: "15901",
   *       account: "1234567",
   *       orderNo: "C0001",
   *       status: 30,
   *       ...
   *     },
   *     {
   *       functionType: 30,
   *       date: "2024/03/25",
   *       seqNo: "00110212609",
   *       branchNo: "15901",
   *       account: "1234567",
   *       orderNo: "C0002",
   *       status: 30,
   *       ...
   *     },]
   * }
   */
  batchCancelOrder(account: JsAccount, orders: Array<FutOptOrderResult>): Response<Array<FutOptOrderResult>>
  /**
   * Get batch order record list
   *
   * @param account - Ordering account
   * @returns A list contains one or more BatchResult objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [{
   *     functionType: 0,
   *     date: "2023/10/16",
   *     branchNo: "6460",
   *     account: "26",
   *     batchSeqNo: "11EE6BC3B85670DE8000000C29304663"
   *   },
   *   {
   *     functionType: 15,
   *     date: "2023/10/16",
   *     branchNo: "6460",
   *     account: "26",
   *     batchSeqNo: "11EE6BC3E189F02A8000000C29304663"
   *   },
   *   ...
   *   ]
   * }
   */
  batchOrderLists(account: JsAccount): Response<Array<BatchResult>>
  /**
   * Check execution status of  batch list
   *
   * @param account - Ordering account
   * @param batch - Query batch result
   * @returns A list contains one or more BatchResult objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2023/10/16",
   *       seqNo: "00000000001",
   *       branchNo: "6460",
   *       ...
   *     },
   *     {
   *       seqNo: "00000000002",
   *       branchNo: "6460",
   *       .........
   *     }]
   * }
   */
  batchOrderDetail(account: JsAccount, batch: BatchResult): Response<Array<FutOptOrderResult>>
  /**
   * Convert symbol to order or subscribe marketdata
   *
   * @param stock_symbol - Symbol from accounting return
   * @param expiry_date - Symbol's expiry date
   * @param strike_price - Symbol's strike price (only option)
   * @param call_put - Symbol's call / put (only option)
   * @returns Order Symbol in string
   */
  convertSymbol(stockSymbol: string, expiryDate: string, strikePrice?: number | undefined | null, callPut?: CallPut | undefined | null): string
  singleCondition(account: JsAccount, startDate: string, endDate: string, stopSign: StopSign, condition: Condition, order: FutOptConditionOrder, childInfo?: FutOptTPSLWrapper | undefined | null): Response<ConditionOrderResult>
  multiCondition(account: JsAccount, startDate: string, endDate: string, stopSign: StopSign, conditions: Array<Condition>, order: FutOptConditionOrder, childInfo?: FutOptTPSLWrapper | undefined | null): Response<ConditionOrderResult>
  timeSliceOrder(account: JsAccount, startDate: string, endDate: string, stopSign: StopSign, splitDescription: SplitDescription, order: FutOptConditionOrder): Response<ConditionOrderResult>
  getTimeSliceOrder(account: JsAccount, batchNo: string, marketType?: FutOptConditionMarketType | undefined | null): Response<Array<ConditionDetail>
  getConditionHistory(account: JsAccount, startDate: string, endDate: string, marketType?: FutOptConditionMarketType | undefined | null, historyType?: HistoryStatus | undefined | null): Response<Array<ConditionDetail>
  getConditionOrder(account: JsAccount, marketType?: FutOptConditionMarketType | undefined | null, conditionStatus?: ConditionStatus | undefined | null): Response<Array<ConditionDetail>
  cancelConditionOrders(account: JsAccount, guid: string, marketType?: FutOptConditionMarketType | undefined | null): Response<string>
  trailProfit(account: JsAccount, startDate: string, endDate: string, stopSign: StopSign, trailOrder: FutOptTrailOrder): Response<ConditionOrderResult>
  getTrailOrder(account: JsAccount, marketType?: FutOptConditionMarketType | undefined | null): Response<Array<ConditionDetail>
  getTrailHistory(account: JsAccount, startDate: string, endDate: string, marketType?: FutOptConditionMarketType | undefined | null): Response<Array<ConditionDetail>
  getConditionOrderById(account: JsAccount, guid: string, marketType?: FutOptConditionMarketType | undefined | null): Response<Array<ConditionDetail>
}
export type JsFutOptAccounting = FutOptAccounting
export declare class FutOptAccounting {
  constructor()
  /**
   * Check account margin equity’s amount
   *
   * @param account - Ordering account
   * @returns A list contains one or more Equity objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [{
   *     date: "2024/04/08",
   *     branchNo: "15901",
   *     account: "1234567",
   *     currency: "NTD",
   *     yesterdayBalance: 22435152.4,
   *     todayBalance: 22434910.4,
   *     initialMargin: 1114946.0,
   *     maintenanceMargin: 939214.0,
   *     clearingMargin: 915760.0,
   *     todayEquity: 22694910.4,
   *     withhold: 126402.0,
   *     availableMargin: 21453562.4,
   *     risk_index: 0.0,
   *     disgorgement: 0.0,
   *     optPnl: -248600.0,
   *     optValue: -193100.0,
   *     optLongValue: 311900.0,
   *     optShortValue: 505000.0,
   *     futRealizedPnl: 0.0,
   *     futUnrealizedPnl: 60700.0,
   *     yesterdayEquity: 22634452.4,
   *     buyLot: 22,
   *     sellLot: 7
   *   }]
   * }
   */
  queryMarginEquity(account: JsAccount): Response<Array<Equity>>
  /**
   * Check account closing position record
   *
   * @param account - Ordering account
   * @param start_date - Query record start date
   * @param end_date - Query record end date (if empty will fill in today automatically)
   * @returns A list contains one or more CloseRecord objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       date: "2024/04/10",
   *       branchNo: "15000",
   *       account: "12345678",
   *       positionKind: 1,
   *       orderNo: "15001-0000",
   *       market: "TAIMEX",
   *       symbol: "FITX",
   *       expiryDate: "202404",
   *       buySell: Buy,
   *       price: 20847.0,
   *       origLots: 1,
   *       transactionFee: 40.0,
   *       tax: 83.0,
   *     },
   *     ...
   *   ]
   * }
   */
  closePositionRecord(account: JsAccount, startDate: string, endDate?: string | undefined | null): Response<Array<CloseRecord>>
  /**
   * Check account position contain spread and single
   *
   * @param account - Ordering account
   * @returns A list contains one or more HybridPosition objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [{
   *     date: "2024/04/08",
   *     branchNo: "15901",
   *     account: "1234567",
   *     isSpread: False,
   *     positionKind: 1,
   *     symbol: "FITX",
   *     expiryDate: 202404,
   *     buySell: Buy,
   *     price: 20325.3333,
   *     origLots: 3,
   *     tradableLot: 3,
   *     orderType: New,
   *     currency: "TWD",
   *     marketPrice: "20351",
   *     initialMargin: 0.0,
   *     maintenanceMargin: 0.0,
   *     clearingMargin: 0.0,
   *     optValue: 0.0,
   *     optLongValue: 0.0,
   *     optShortValue: 0.0,
   *     profitOrLoss: 0.0,
   *     premium: 0.0,
   *   }]
   * }
   */
  queryHybridPosition(account: JsAccount): Response<Array<HybridPosition>>
  /**
   * Check account position in single
   *
   * @param account - Ordering account
   * @returns A list contains one or more Position objects
   * @example
   * {
   *   isSuccess: true,
   *   data: [{
   *     date: "2024/04/08",
   *     branchNo: "15901",
   *     account: "1234567",
   *     orderNo: "l0001-0000",
   *     positionKind: 1,
   *     symbol: "FITX",
   *     expiryDate: 202404,
   *     strikePrice: None,
   *     callPut: None,
   *     buySell: Buy,
   *     price: 20362,
   *     origLots: 2,
   *     tradableLot: 2,
   *     orderType: New,
   *     currency: "TWD",
   *     marketPrice: "20521.0000",
   *     initialMargin: 358000.0,
   *     maintenanceMargin: 274000.0,
   *     clearingMargin: 264000.0,
   *     profitOrLoss: 63600.0,
   *     premium: 0.0,
   *   }]
   * }
   */
  querySinglePosition(account: JsAccount): Response<Array<Position>>
}
export type JsStock = Stock
export declare class Stock {
  constructor()
  /**
   * Sends in a new order.
   *
   * @param account (Account): Ordering account.
   * @param order (OrderObject): The order content.
   * @param unblock (bool) [optional]: Using unblock mode; default: false.
   * @returns An object containing order information. (If using unblock mode, the order result may not contain whole information.)
   *
   * @example
   * // Usage function example
   * // Can define order like this:
   * const order = {
   *   buySell: BSAction.Buy,
   *   symbol: "2881",
   *   price: "66",
   *   quantity: 2000,
   *   marketType: MarketType.Common,
   *   priceType: PriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: OrderType.Stock,
   *   userdef: "from Js"
   * };
   *
   * sdk.stock.placeOrder(account, order);
   */
  placeOrder(account: Account, order: OrderObject, unblock?: boolean | undefined | null): Response<OrderResult>
  /**
   * Gets today’s all orders; active, canceled, or filled.
   *
   * @param account (Account): The account to query.
   * @returns An object containing one or more result objects.
   *
   * @example
   * // For Example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000001",
   *       "branchNo": "6460",
   *       // ...
   *     },
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000002",
   *       "branchNo": "6460",
   *       // ...
   *     }
   *   ]
   * }
   */
  getOrderResults(account: Account): Response<Array<OrderResult>>
  /**
   * Get today’s all orders; active, canceled, or filled (include order process).
   *
   * @param account (Account): The account to query.
   * @returns An object containing one or more result objects.
   *
   * @example
   * // For Example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000001",
   *       "branchNo": "6460",
   *       // ...
   *     },
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000002",
   *       "branchNo": "6460",
   *       // ...
   *     }
   *   ]
   * }
   */
  getOrderResultsDetail(account: Account): Response<Array<OrderResult>>
  /**
   * Cancel an active order.
   *
   * @param account (Account): Ordering account.
   * @param target_order (OrderResult): Order to be deleted.
   * @param unblock (boolean) [optional]: Using unblock mode; default: false.
   * @returns An object containing modified order information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "functionType": 30,
   *     "date": "2024/03/08",
   *     "seqNo": "00000308948",
   *     "branchNo": "6460",
   *     "account": "26",
   *     "orderNo": "x0023",
   *     "assetType": 0,
   *     "market": "TAIEX",
   *     "marketType": "Common",
   *     "stockNo": "1101",
   *     "buySell": "Sell",
   *     "priceType": "Limit",
   *     "price": 41.2,
   *     "quantity": 5000,
   *     "timeInForce": "ROD",
   *     "orderType": "Stock",
   *     "isPreOrder": false,
   *     "status": 30,
   *     "afterPriceType": "Limit",
   *     "afterPrice": 41.2,
   *     "unit": 1000,
   *     "afterQty": 0,
   *     "filledQty": 0,
   *     "filledMoney": 0,
   *     "beforeQty": 5000,
   *     "beforePrice": 41.2,
   *     "userDef": 12345678,
   *     "lastTime": "16:53:57.536",
   *   }
   * }
   */
  cancelOrder(account: Account, orderRes: OrderResult, unblock?: boolean | undefined | null): Response<OrderResult>
  /**
   * modifies the price of an order.
   *
   * @param account (Account): Ordering account.
   * @param modifyPriceObj (object): Object for price adjustment.
   * @param unblock (bool) [optional]: Using unblock mode; default: false.
   * @returns An object containing modified order information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "functionType": 15,
   *     "date": "2023/11/22",
   *     "seqNo": "00000308866",
   *     "branchNo": "6460",
   *     "account": "26",
   *     "orderNo": "x0011",
   *     "assetType": 0,
   *     "market": "TAIEX",
   *     "marketType": "Common",
   *     "stockNo": "1101",
   *     "buySell": "Sell",
   *     "priceType": "Limit",
   *     "price": 41.2,
   *     "quantity": 5000,
   *     "timeInForce": "ROD",
   *     "orderType": "Stock",
   *     "isPreOrder": false,
   *     "status": 10,
   *     "afterPriceType": "Limit",
   *     "afterPrice": 41.1,
   *     "unit": 1000,
   *     "afterQty": 2000,
   *     "filledQty": 0,
   *     "filledMoney": 0,
   *     "beforeQty": null,
   *     "beforePrice": 41.3,
   *     "userDef": 12345678,
   *     "lastTime": "13:56:57.713",
   *   }
   * }
   */
  modifyPrice(account: Account, orderRes: ModifyPrice, unblock?: boolean | undefined | null): Response<OrderResult>
  /**
   * Modifies the quantity of an order.
   *
   * @param account (Account): Ordering account.
   * @param modifyQuantityObj (object): Object for quantity adjustment.
   * @param unblock (bool) [optional]: Using unblock mode; default: false.
   * @returns An object containing modified order information.
   *
   * @example
   * // Example return:
   * {
   *   isSuccess: true,
   *   data: {
   *     "functionType": 20,
   *     "date": "2024/03/08",
   *     "seqNo": "00000308866",
   *     "branchNo": "6460",
   *     "account": "26",
   *     "orderNo": "x0011",
   *     "assetType": 0,
   *     "market": "TAIEX",
   *     "marketType": "Common",
   *     "stockNo": "1101",
   *     "buySell": "Sell",
   *     "priceType": "Limit",
   *     "price": 41.2,
   *     "quantity": 5000,
   *     "timeInForce": "ROD",
   *     "orderType": "Stock",
   *     "isPreOrder": false,
   *     "status": 10,
   *     "afterPriceType": "Limit",
   *     "afterPrice": 41.3,
   *     "unit": 1000,
   *     "afterQty": 2000,
   *     "filledQty": 0,
   *     "filledMoney": 0,
   *     "beforeQty": 3000,
   *     "beforePrice": 41.2,
   *     "userDef": 12345678,
   *     "lastTime": "13:56:28.966",
   *   }
   * }
   */
  modifyQuantity(account: Account, orderRes: ModifyQuantity, unblock?: boolean | undefined | null): Response<OrderResult>
  /**
   * Retrieves order records.
   *
   * @param account (Account): Ordering account.
   * @param startDate (string): Query record start date.
   * @param endDate (string) [optional]: Query record end date (if empty, will fill in today automatically).
   * @returns An object containing one or more result objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000001",
   *       "branchNo": "6460",
   *       // ...
   *     },
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000002",
   *       "branchNo": "6460",
   *       // ...
   *     }
   *   ]
   * }
   */
  orderHistory(account: Account, startDate: string, endDate?: string | undefined | null): Response<Array<OrderResult>>
  /**
   * Retrieves filled data records.
   *
   * @param account (Account): Query specified account.
   * @param startDate (string): Query record start date.
   * @param endDate (string) [optional]: Query record end date (if empty, will fill in today automatically).
   * @returns An object containing one or more filled data objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/09/15",
   *       // ...
   *       "filledNo": "00000000001",
   *       "filledAvgPrice": 35.2,
   *       "filledQty": 1000,
   *       "filledPrice": 35.2,
   *       "orderType": Stock,
   *       "filledTime": "10:31:00.931"
   *     },
   *     {
   *       "date": "2023/09/15",
   *       // ...
   *       "filledNo": "00000000003",
   *       "filledAvgPrice": 35.2,
   *       "filledQty": 1000,
   *       "filledPrice": 35.2,
   *       "orderType": Stock,
   *       "filledTime": "10:33:00.931"
   *     }
   *   ]
   * }
   */
  filledHistory(account: Account, startDate?: string | undefined | null, endDate?: string | undefined | null): Response<Array<FilledData>>
  /**
   * Sets price change for an order.
   *
   * @param targetOrder (OrderResult): Order to be modified.
   * @param price (string) [optional]: Modify price (If the 'priceType' field is entered, this field should be None or empty).
   * @param priceType (PriceType) [optional]: Modify price type (If the 'price' field is entered, this field should be None or empty).
   * @returns An object containing the order that is prepared to modify the price.
   *
   * @example
   * // For Example:
   * // 1. Using getOrderResult to retrieve OrderResult
   * // 2. Designate order to modify
   *
   * const orderRes = sdk.stock.getOrderResults(accounts.data[0]);
   * const targetOrder = orderRes.data[0];
   * const modifyPriceObj = sdk.stock.makeModifyPriceObj(targetOrder, "65");
   */
  makeModifyPriceObj(order: OrderResult, price?: string | undefined | null, priceType?: PriceType | undefined | null): ModifyPrice
  /**
   * Sets quantity change for an order.
   *
   * @param targetOrder (OrderResult): Order for quantity adjustment.
   * @param quantity (int): Modify quantity.
   * @returns An object containing the order that is prepared to modify the quantity.
   *
   * @example
   * // For example:
   * // 1. Using getOrderResults to retrieve OrderResult
   * // 2. Designate order to modify
   *
   * const orderRes = sdk.stock.getOrderResults(accounts.data[0]);
   * const targetOrder = orderRes.data[0];
   * const modifyQuantityObj = sdk.stock.makeModifyQuantityObj(targetOrder, 1000);
   */
  makeModifyQuantityObj(order: OrderResult, quantity: number): ModifyQuantity
  /**
   * Send in a new batch order.
   *
   * @param account (Account): Ordering account.
   * @param order_object (OrderObject[]): The order array content.
   * @returns An object containing one or more order result objects.
   *
   * @example
   * // Usage function example:
   * // Can define orders like this
   * const orders: OrderObject[] = [{
   *   buySell: BSAction.Buy,
   *   symbol: "2881",
   *   price: "66",
   *   quantity: "2000",
   *   marketType: MarketType.Common,
   *   priceType: PriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: OrderType.Stock,
   *   userDef: "from Js batch1"
   * },{
   *   buySell: BSAction.Buy,
   *   symbol: "2881",
   *   price: "65",
   *   quantity: "2000",
   *   marketType: MarketType.Common,
   *   priceType: PriceType.Limit,
   *   timeInForce: TimeInForce.ROD,
   *   orderType: OrderType.Stock,
   *   userDef: "from Js batch2"
   * }];
   * sdk.stock.batchPlaceOrder(target_user, orders)
   */
  batchPlaceOrder(account: Account, orders: Array<OrderObject>): Response<Array<OrderResult>>
  /**
   * Batch modify order quantity.
   *
   * @param account (Account): Ordering account.
   * @param modifyQuantityObj (object[]): Object array for quantity adjustment.
   * @returns An object containing one or more modified order information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "functionType": 20,
   *       "date": "2024/03/08",
   *       ...
   *       "stockNo": "2881",
   *       "buySell": "Buy",
   *       "priceType": "Limit",
   *       "price": 66,
   *       "quantity": 2000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 10,
   *       ...
   *       "afterQty": 1000,
   *       "filledQty": 0,
   *       "filledMoney": 0,
   *       "beforeQty": 2000,
   *       "userDef": "batch 2",
   *       "lastTime": "12:21:51.023",
   *     },
   *     {
   *       "functionType": 20,
   *       "date": "2024/03/08",
   *       ...
   *       "stockNo": "2881",
   *       "buySell": "Buy",
   *       "priceType": "Limit",
   *       "price": 66,
   *       "quantity": 2000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 10,
   *       "afterPriceType": null,
   *       "afterPrice": 66,
   *       ...
   *     },
   *     ...
   *   ]
   * }
   */
  batchModifyQuantity(account: Account, orders: Array<ModifyQuantity>): Response<Array<OrderResult>>
  /**
   * Batch modify order price.
   *
   * @param account (Account): Ordering account.
   * @param modifyPriceObj (object[]): Object array for price adjustment.
   * @returns An object containing one or more modified order information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "functionType": 15,
   *       "date": "2023/10/16",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "orderNo": "bA636",
   *       "marketType": Common,
   *       "stockNo": "2881",
   *       "afterQty": 1000,
   *       "afterPriceType": Limit,
   *       "afterPrice": 63.0,
   *       "lastTime": "12:21:30.412"
   *     },
   *     {
   *       "functionType": 15,
   *       "date": "2023/10/16",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "orderNo": "bA637",
   *       "marketType": Common,
   *       "stockNo": "2881",
   *       "afterQty": 1000,
   *       "afterPriceType": Limit,
   *       "afterPrice": 63.0,
   *       "lastTime": "12:21:30.412"
   *     },
   *     {
   *       "functionType": 15,
   *       "date": "2023/11/22",
   *       ...
   *       "stockNo": "1101",
   *       "buySell": "Sell",
   *       "priceType": "Limit",
   *       "price": 41.2,
   *       "quantity": 5000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 10,
   *       "afterPriceType": "Limit",
   *       "afterPrice": 41.1,
   *       ...
   *       "beforePrice": 41.3,
   *       "userDef": 12345678,
   *       "lastTime": "10:56:57.713",
   *     },
   *     {
   *       "functionType": 15,
   *       "date": "2023/11/22",
   *       ...
   *       "stockNo": "1101",
   *       "buySell": "Sell",
   *       "priceType": "Limit",
   *       "price": 41.2,
   *       "quantity": 5000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 10,
   *       ...
   *     },
   *     ...
   *   ]
   * }
   */
  batchModifyPrice(account: Account, orders: Array<ModifyPrice>): Response<Array<OrderResult>>
  /**
   * Batch cancel active orders.
   *
   * @param account (Account): Ordering account.
   * @param target_order (OrderResult[]): Order array to be canceled.
   * @returns An object containing one or more modified order information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "functionType": 30,
   *       "date": "2024/03/08",
   *       ...
   *       "stockNo": "1101",
   *       "buySell": "Sell",
   *       "priceType": "Limit",
   *       "price": 41.2,
   *       "quantity": 5000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 30,
   *       "afterPriceType": "Limit",
   *       "afterPrice": 41.2,
   *       ...
   *       "beforeQty": 5000,
   *       "beforePrice": 41.2,
   *       "userDef": 12345678,
   *       "lastTime": "16:53:57.536",
   *     },
   *     {
   *       "functionType": 30,
   *       "date": "2024/03/08",
   *       ...
   *       "stockNo": "1101",
   *       "buySell": "Sell",
   *       "priceType": "Limit",
   *       "price": 41.2,
   *       "quantity": 5000,
   *       "timeInForce": "ROD",
   *       "orderType": "Stock",
   *       "isPreOrder": false,
   *       "status": 30,
   *       ...
   *     }
   *     ...
   *   ]
   * }
   */
  batchCancelOrder(account: Account, orders: Array<OrderResult>): Response<Array<OrderResult>>
  /**
   * Get batch order record list.
   *
   * @param account (Account): Ordering account.
   * @returns An object containing one or more BatchResult objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "functionType": 0,
   *       "date": "2023/10/16",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "batchSeqNo": "11EE6BC3B85670DE8000000C29304663"
   *     },
   *     {
   *       "functionType": 15,
   *       "date": "2023/10/16",
   *       "branchNo": "6460",
   *       "account": "26",
   *       "batchSeqNo": "11EE6BC3E189F02A8000000C29304663"
   *     },
   *     // ...
   *   ]
   * }
   */
  batchOrderLists(account: Account): Response<Array<BatchResult>>
  /**
   * Check execution status of batch list.
   *
   * @param account (Account): Ordering account.
   * @param batchOrderList (BatchResult[]): Query batch result.
   * @returns An object containing one or more BatchResult objects.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000001",
   *       "branchNo": "6460",
   *     },
   *     {
   *       "date": "2023/10/16",
   *       "seqNo": "00000000002",
   *       "branchNo": "6460",
   *     },
   *     // ...
   *   ]
   * }
   */
  batchOrderDetail(account: Account, batch: BatchResult): Response<Array<OrderResult>>
  /**
   * Checks available margin quota.
   *
   * @param account (Account): Ordering account.
   * @param stockNo (string): Query for stock ID.
   * @returns An object containing margin and shortsell quota.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "stockNo": "2330",
   *     "date": "2023/10/20",
   *     "shortsellOrigQuota": null,
   *     "shortsellTradableQuota": 10,
   *     "marginOrigQuota": null,
   *     "marginTradableQuota": 10,
   *     "marginRatio": 60,
   *     "shortRatio": 90
   *   }
   * }
   */
  marginQuota(account: Account, symbol: string): Response<MarginShortQuota>
  /**
   * Checks available day trade quota and pre-collected information.
   *
   * @param account (Account): Ordering account.
   * @param stockNo (string): Query for stock ID.
   * @returns An object containing day trade quota and pre-collected information.
   *
   * @example
   * // For example:
   * {
   *   isSuccess: true,
   *   data: {
   *     "stockNo": "2330",
   *     "date": "2023/10/16",
   *     "daytradeOrigQuota": 0,
   *     "daytradeTradableQuota": 0,
   *     "precollectSingle": null,
   *     "precollectAccumulate": null,
   *     "status": 0
   *   }
   * }
   */
  daytradeAndStockInfo(account: Account, symbol: string): Response<DayTradeStockInfo>
  singleCondition(account: Account, startDate: string, endDate: string, stopSign: StopSign, condition: Condition, order: ConditionOrder, childInfo?: TPSLWrapper | undefined | null): Response<ConditionOrderResult>
  multiCondition(account: Account, startDate: string, endDate: string, stopSign: StopSign, conditions: Array<Condition>, order: ConditionOrder, childInfo?: TPSLWrapper | undefined | null): Response<ConditionOrderResult>
  timeSliceOrder(account: Account, startDate: string, endDate: string, stopSign: StopSign, splitDescription: SplitDescription, order: ConditionOrder): Response<ConditionOrderResult>
  getTimeSliceOrder(account: Account, batchNo: string): Response<Array<ConditionDetail>
  getConditionHistory(account: Account, startDate: string, endDate: string, historyType?: HistoryStatus | undefined | null): Response<Array<ConditionDetail>
  getConditionOrder(account: Account, conditionStatus?: ConditionStatus | undefined | null): Response<Array<ConditionDetail>
  cancelConditionOrders(account: Account, guid: string): Response<string>
  trailProfit(account: Account, startDate: string, endDate: string, stopSign: StopSign, trailOrder: TrailOrder): Response<ConditionOrderResult>
  getTrailOrder(account: Account): Response<Array<ConditionDetail>
  getTrailHistory(account: Account, startDate: string, endDate: string): Response<Array<ConditionDetail>
  getConditionOrderById(account: Account, guid: string): Response<Array<ConditionDetail>
  getConditionDaytradeById(account: Account, guid: string): Response<Array<ConditionDetail>
  singleConditionDayTrade(account: Account, stopSign: StopSign, endTime: string, condition: Condition, order: ConditionOrder, dayTrade: ConditionDayTrade, childInfo?: TPSLWrapper | undefined | null, fixSession?: boolean | undefined | null): Response<ConditionOrderResult>
  multiConditionDayTrade(account: Account, stopSign: StopSign, endTime: string, conditions: Array<Condition>, order: ConditionOrder, dayTrade: ConditionDayTrade, childInfo?: TPSLWrapper | undefined | null, fixSession?: boolean | undefined | null): Response<ConditionOrderResult>
  singleConditionStop(account: Account, startDate: string, endDate: string, stopSign: StopSign, condition: Condition, order: ConditionOrder, stopConditions: Array<Condition>, secondStopConditions?: Array<Condition> | undefined | null, childInfo?: TPSLWrapper | undefined | null): Response<ConditionOrderResult>
  multiConditionStop(account: Account, startDate: string, endDate: string, stopSign: StopSign, conditions: Array<Condition>, order: ConditionOrder, stopConditions: Array<Condition>, secondStopConditions?: Array<Condition> | undefined | null, childInfo?: TPSLWrapper | undefined | null): Response<ConditionOrderResult>
}
export declare class FugleRealtime {
  
  constructor()
  get fubonWsUrl(): string
  get realtimeRestUrl(): string
  get realtimeWsNormalUrl(): string
  get realtimeWsSpeedUrl(): string
}
export type JsCoreSDK = CoreSdk
export declare class CoreSdk {
  constructor(version: string, url: string)
  /**
   * Login Fubon Neo with Your Account
   *
   * @param personalId (string): Your fubon account ID.
   * @param password (string): Your fubon account password.
   * @param certPath (string): Your certification path where you store.
   * @param certPass (string): Your certification password.
   * @returns An object having account information (if it have multiple account, it will return multiple account).
   *
   * @example
   * ```
   * {
   *   isSuccess: true,
   *   data: [
   *     {
   *       "name": "富邦Bill",
   *       "account": "28",
   *       "branchNo": "6460"
   *     },
   *     {
   *       "name": "富邦Angle",
   *       "account": "26",
   *       "branchNo": "6460"
   *     }
   *   ]
   * }
   * ```
   */
  login(personalId: string, pass: string, certPath: string, certPass?: string | undefined | null): Response<Account>
  logout(): boolean
  dmaLogin(personalId: string, pass: string): Response<Account>
  exchangeRealtimeToken(): string
  /**
   * Stock trading function
   *
   * Function include : placeOrder() ,  modifyPrice(), cancelOrder() …etc
   */
  get stock(): Stock
  /**
   * Stock account data query
   *
   * Function include : inventories(), realizedGainsAndLoses(), maintenance().....etc
   */
  get accounting(): Accounting
  innerSetOnOrder(callback: (err: null | Error, event: OrderResponse) => void): void
  innerSetOnOrderChanged(callback: (err: null | Error, event: OrderResponse) => void): void
  setOnFilled(callback: (err: null | Error, event: FilledData) => void): void
  recoverEventData(): Response<Array<Recover>>
  /**
   * Stock futopt trading function
   *
   * Function include : inventories(), realizedGainsAndLoses(), maintenance().....etc
   */
  get futopt(): FutOpt
  /**
   * Stock futopt account data query
   *
   * Function include : inventories(), realizedGainsAndLoses(), maintenance().....etc
   */
  get futoptAccounting(): FutOptAccounting
  innerSetOnFutoptOrderChanged(callback: (err: null | Error, event: FutOptOrderResponse) => void): void
  innerSetOnEvent(callback: (err: null | Error, event: string[]) => void): void
  innerSetOnFutoptOrder(callback: (err: null | Error, event: FutOptOrderResponse) => void): void
  setOnFutoptFilled(callback: (err: null | Error, event: FutOptFilledData) => void): void
}
